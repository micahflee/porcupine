#!/usr/bin/env python3
import argparse
import sys
import os
import json
import subprocess
import inspect
import signal
from os.path import isfile, join, isdir
from PyQt5 import Qt, QtWidgets, QtCore

def get_browser_list():
        # Path to applications in Linux
    all_applications_path = ['/usr/share/applications/', '/usr/local/share/applications/', '~/.local/share/applications/']
    applications_path = '/usr/share/applications/' # TODO: add /usr/local/share/applications, and ~/.local/share/applications later


    # Loop over paths
    #for path in all_applications_path:

    # create file exists exception
        # Collect all applications in path
    all_applications_list = [f for f in listdir(applications_path) if isfile(join(applications_path, f))]

    #   else:
    #       continue

    available_browsers_name = []

    # Create list of http/https applications
    for file in all_applications_list:
        if ".desktop" in file:
            filepath = applications_path + file
            searchfile = open(filepath, "r")
            for line in searchfile:
                if "x-scheme-handler/http" in line:
                    available_browsers_name.append(file)
            searchfile.close()

    # Dictionary to store:
    #   keys = .desktop
    #   values = paths in list[icon,executable]
    all_browsers_new = []

    # Search through browser list and store in browser_info dictionary
    for browser in available_browsers_name:
        browser_dict_new = {} # to store each individual browser's info
        available_browsers = applications_path + browser
        searchbrowser = open(available_browsers, "r")
        browser_dict_new["name"] = browser
        for line in searchbrowser:
            if "Icon=" in line:
                browser_dict_new["icon_path"] = line[5:].strip()
            if "Exec=" in line:
                browser_dict_new["exec_path"] = line[5:].strip()
        all_browsers_new.append(browser_dict_new)
        searchbrowser.close()
    return all_browsers_new


def get_icon_path():
    if sys.argv and sys.argv[0].startswith(sys.prefix):
        # Porcupine is installed systemwide
        prefix = os.path.join(sys.prefix, 'share/pixmaps')

    else:
        # Look for share directory relative to python file
        prefix = os.path.join(os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))), 'share')

    return os.path.join(prefix, "porcupine.png")


def validate_url(url):
    return (url.lower().startswith('http://') or url.lower().startswith('https://'))


def delay(app, milliseconds):
    time = QtCore.QTime.currentTime().addMSecs(milliseconds)
    while (QtCore.QTime.currentTime() < time):
        app.processEvents()


class Settings(object):
    def __init__(self):
        self.path = os.path.expanduser('~/.config/porcupine.json')

    def load(self):
        use_default = False
        if os.path.exists(self.path):
            try:
                settings = json.load(open(self.path, 'r'))
            except:
                use_default = True
        else:
            use_default = True

        if use_default:
            settings = {
                'action': 'clipboard',
                'cmd': ''
            }

        return settings

    def save(self, action, cmd):
        settings = {
            'action': action,
            'cmd': cmd
        }

        try:
            os.makedirs(os.path.dirname(self.path))
        except:
            pass

        json.dump(settings, open(self.path, 'w'))


class PorcupineSettingsWindow(QtWidgets.QMainWindow):
    def __init__(self, app, settings):
        super(PorcupineSettingsWindow, self).__init__()
        self.app = app
        self.settings = settings
        self.setWindowTitle('Porcupine')
        self.setWindowIcon(Qt.QIcon(get_icon_path()))

        # Load the settings
        s = self.settings.load()

        # Build the GUI
        label = QtWidgets.QLabel('What should Porcupine do with the URL?')
        self.radio_clipboard = QtWidgets.QRadioButton('Copy to my clipboard')
        self.radio_clipboard.toggled.connect(self.toggle)
        self.radio_command = QtWidgets.QRadioButton('Run command with the URL')
        self.radio_command.toggled.connect(self.toggle)
        self.radio_choose = QtWidgets.QRadioButton('Select browser each time')
        self.radio_choose.toggled.connect(self.toggle)
        self.edit_command = QtWidgets.QLineEdit()
        self.edit_command.setPlaceholderText('for example: qvm-open-in-dvm %U')
        self.edit_command.setText(s['cmd'])

        # Button
        self.save_button = QtWidgets.QPushButton("Save Settings")
        self.save_button.clicked.connect(self.save_settings)
        buttons_layout = QtWidgets.QHBoxLayout()
        buttons_layout.addWidget(self.save_button)
        buttons_layout.addStretch()

        # Default browser
        default_browser_label = QtWidgets.QLabel("Porcupine isn't your default browser")
        default_browser_label.setStyleSheet('QLabel { font-size: 13px; }')
        default_browser_button = QtWidgets.QPushButton("Set as default")
        default_browser_button.setStyleSheet('QPushButton { font-size: 13px; font-weight: bold; }')
        default_browser_button.clicked.connect(self.set_default_browser)
        default_browser_layout = QtWidgets.QHBoxLayout()
        default_browser_layout.addWidget(default_browser_label)
        default_browser_layout.addWidget(default_browser_button)
        default_browser_layout.addStretch()
        self.default_browser_group = QtWidgets.QGroupBox()
        self.default_browser_group.setLayout(default_browser_layout)

        # Choose the default action
        if s['action'] == 'clipboard':
            self.radio_clipboard.setChecked(True)
            self.radio_command.setChecked(False)
            self.radio_choose.setChecked(False)
        elif s['action'] == 'command':
            self.radio_clipboard.setChecked(False)
            self.radio_command.setChecked(True)
            self.radio_choose.setChecked(False)
        else: #adding GUI option as radio_choose
            self.radio_clipboard.setChecked(False)
            self.radio_command.setChecked(False)
            self.radio_choose.setChecked(True)
        self.update_ui()

        # Set the layout
        layout = QtWidgets.QVBoxLayout()
        layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        layout.addWidget(label)
        layout.addWidget(self.radio_clipboard)
        layout.addWidget(self.radio_choose)  # adding GUI to QT layout
        layout.addWidget(self.radio_command)
        layout.addWidget(self.edit_command)
        layout.addStretch()
        layout.addLayout(buttons_layout)
        layout.addStretch()
        layout.addWidget(self.default_browser_group)
        central_widget = QtWidgets.QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)
        self.show()

    def toggle(self):
        self.update_ui()

    def update_ui(self):
        # Is porcupine the default browser?
        default_browser = subprocess.check_output(['xdg-settings', 'get', 'default-web-browser']).strip()
        if default_browser == b'porcupine.desktop':
            self.default_browser_group.hide()
        else:
            self.default_browser_group.show()

        # Only update the UI if it has been built
        if hasattr(self, 'radio_clipboard') and hasattr(self, 'radio_command') and hasattr(self, 'edit_command'):
            if self.radio_command.isChecked():
                self.edit_command.show()
            else:
                self.edit_command.hide()

        self.adjustSize()

    def save_settings(self):
        if self.radio_clipboard.isChecked():
            action = 'clipboard'
        elif self.radio_command.isChecked():
            action = 'command'
        else:
            action = 'choose'
        cmd = self.edit_command.text()

        self.settings.save(action, cmd)
        self.close()

    def set_default_browser(self):
        subprocess.call(['xdg-settings', 'set', 'default-web-browser', 'porcupine.desktop'])
        self.update_ui()

def main():
    # Parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('url', metavar='url', nargs='?', help='URL to open')
    args = parser.parse_args()

    # Create the settings object
    settings = Settings()

    # Start the Qt application
    app = QtWidgets.QApplication(sys.argv)

    if args.url is None:
        # No arguments, open the settings dialog. Even though settings_window is
        # never used later, we must keep a reference to it
        settings_window = PorcupineSettingsWindow(app, settings)

    else:
        # Start the system tray
        systray = Qt.QSystemTrayIcon(Qt.QIcon(get_icon_path()))
        systray.show()
        delay(app, 20)

        # Validate it as a URL
        url = sys.argv[1]

        if validate_url(url):
            # Load settings
            s = settings.load()

            if s['action'] == 'clipboard':
                # Copy to clipboard
                clipboard = app.clipboard()
                clipboard.setText(url)
                systray.showMessage("Copied address to clipboard", url)
            elif s['action'] == 'command':
                # Launch subprocess
                cmd = s['cmd'].split()
                cmd = [url if x == '%U' else x for x in cmd]
                try:
                    subprocess.call(cmd)
                except:
                    systray.showMessage("Porcupine", "Error running command: {}".format(s['cmd']))
            else:  # Try to get a response here.
                clipboard = app.clipboard()
                clipboard.setText("blahblahblah")
                systray.showMessage("I did a thing", url)
        else:
            systray.showMessage("Porcupine", "{} does not appear to be a URL".format(url))

        # Quit after a few seconds
        def quit():
            systray.hide()
            app.quit()
        timer = QtCore.QTimer()
        timer.timeout.connect(quit)
        timer.start(4000)

    # Allow ctrl-c to work
    signal.signal(signal.SIGINT, signal.SIG_DFL)

    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
